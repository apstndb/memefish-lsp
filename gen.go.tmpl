// Code generated by hagane; DO NOT EDIT

package generated

import (
    "context"

    "go.lsp.dev/protocol"
)

var _ protocol.Server = interface {
{{range exported .Types}}
    {{- if (eq .Name "Server")}}{{range (interface .).Methods}}
        Can{{.Name}}
    {{- end}}{{end -}}
{{end}}
}(nil)

{{range exported .Types}}
    {{- if (eq .Name "Server")}}{{range (interface .).Methods}}
            type Can{{.Name}} interface {
                {{.Name}}{{mustRegexReplaceAll `go\.lsp\.dev/` (mustRegexReplaceAll "^func" .Signature.String "") ""}}
            }

    {{end}}{{end -}}
{{end}}

type server struct{
    handler any
}

{{range exported .Types}}
    {{- if (eq .Name "Server")}}{{range (interface .).Methods}}
        func (s *server) {{.Name}}{{mustRegexReplaceAll `go\.lsp\.dev/` (mustRegexReplaceAll "^func" .Signature.String "") ""}} {
            if s, ok := s.handler.(Can{{.Name}}); !ok {
                return {{range $index, $element := .Signature.Results}}{{if (ne $index 0)}}, {{end}}nil{{end}}
            } else {
                return s.{{.Name}}({{range $index, $element := .Signature.Params}}{{if (ne $index 0)}}, {{end}}{{$element.Name}}{{end}})
            }
        }

    {{end}}{{end -}}
{{end}}

