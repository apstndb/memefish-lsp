// Code generated by hagane; DO NOT EDIT

package lspabst

import (
    "context"
    "log/slog"

    "go.lsp.dev/protocol"
)

var _ context.Context

// Check Can* interfaces are exhaustive
var _ protocol.Server = interface {
{{range exported .Types}}
    {{- if (eq .Name "Server")}}
        {{range (interface .).Methods}}
            Can{{.Name}}
        {{- end}}
    {{end -}}
{{end}}
}(nil)

// Generate Can* interfaces
{{range exported .Types}}
    {{- if (eq .Name "Server")}}{{range (interface .).Methods}}
            type Can{{.Name}} interface {
                {{.Name}}{{mustRegexReplaceAll `^func|go\.lsp\.dev/` .Signature.String ""}}
            }

    {{end}}{{end -}}
{{end}}

// Generate wrapper methods for *Wrapper
{{range exported .Types}}
    {{- if (eq .Name "Server")}}
        {{range (interface .).Methods}}
            func (s *Wrapper) {{.Name}}{{mustRegexReplaceAll `^func|go\.lsp\.dev/` .Signature.String ""}} {
                s.logger.Info("{{.Name}}",
                    {{- range .Signature.Params -}}
                        slog.Any("{{.Name}}", {{.Name}}),
                    {{- end -}}
                )
                if s, ok := s.handler.(Can{{.Name}}); !ok {
                    return {{repeat (.Signature.Results | len) "nil," | trimSuffix ","}}
                } else {
                    return s.{{.Name}}(
                        {{- range $index, $element := .Signature.Params -}}
                            {{$element.Name}},
                        {{- end -}}
                    )
                }
            }
        {{end}}
    {{end -}}
{{end}}

